[33mcommit 328ab63aba89f2d8c42a7269371207ecebb3f0ec[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m)[m
Author: AbhishekMZ <mabhishekz.ai22@rvce.edu.in>
Date:   Fri Nov 22 07:52:17 2024 +0530

    Added HDR image processing (as3.py), GUI interface (as1_gui.py), and updated requirements

[1mdiff --git a/as1_gui.py b/as1_gui.py[m
[1mnew file mode 100644[m
[1mindex 0000000..e69de29[m
[1mdiff --git a/as3.py b/as3.py[m
[1mnew file mode 100644[m
[1mindex 0000000..c270c0b[m
[1m--- /dev/null[m
[1m+++ b/as3.py[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32mimport cv2[m
[32m+[m[32mimport numpy as np[m
[32m+[m
[32m+[m[32m# Load images[m
[32m+[m[32mimg1 = cv2.imread('underexposed.jpg')[m
[32m+[m[32mimg2 = cv2.imread('midexposed.jpg')[m
[32m+[m[32mimg3 = cv2.imread('overexposed.jpg')[m
[32m+[m
[32m+[m[32m# Check if images are loaded properly[m
[32m+[m[32mif img1 is None or img2 is None or img3 is None:[m
[32m+[m[32m    print("Error: One or more images could not be loaded.")[m
[32m+[m[32m    exit()[m
[32m+[m
[32m+[m[32m# Merge images to create HDR using exposure fusion[m
[32m+[m[32mmerge_mertens = cv2.createMergeMertens()[m
[32m+[m[32mhdr = merge_mertens.process([img1, img2, img3])[m
[32m+[m
[32m+[m[32m# Ensure HDR values are within the range [0, 1] before converting to 8-bit[m
[32m+[m[32mhdr = cv2.normalize(hdr, None, 0, 1, cv2.NORM_MINMAX)[m
[32m+[m
[32m+[m[32m# Check for NaN or Inf values in HDR and replace them with 0 if present[m
[32m+[m[32mif np.any(np.isnan(hdr)) or np.any(np.isinf(hdr)):[m
[32m+[m[32m    print("Warning: HDR image contains NaN or Inf values.")[m
[32m+[m[32m    hdr = np.nan_to_num(hdr)  # Replace NaN and Inf with 0[m
[32m+[m
[32m+[m[32m# Convert HDR to 8-bit for display[m
[32m+[m[32mhdr_8bit = (hdr * 255).astype('uint8')[m
[32m+[m
[32m+[m[32m# Save HDR image[m
[32m+[m[32mcv2.imwrite('hdr_image.jpg', hdr_8bit)[m
[32m+[m
[32m+[m[32m# Tonemap HDR image for display in LDR (Low Dynamic Range)[m
[32m+[m[32mtonemap = cv2.createTonemap(gamma=2.2)  # Try adjusting gamma if needed[m
[32m+[m[32mldr = tonemap.process(hdr)[m
[32m+[m
[32m+[m[32m# Clamp LDR values to [0, 1] before converting to 8-bit[m
[32m+[m[32mldr = np.clip(ldr, 0, 1)[m
[32m+[m
[32m+[m[32m# Convert to 8-bit for display[m
[32m+[m[32mldr_8bit = (ldr * 255).astype('uint8')[m
[32m+[m
[32m+[m[32m# Save LDR image[m
[32m+[m[32mcv2.imwrite('ldr_image.jpg', ldr_8bit)[m
[32m+[m
[32m+[m[32mprint("HDR and LDR images have been saved.")[m
[1mdiff --git a/requirements.txt b/requirements.txt[m
[1mindex e9e8a3b..de8169e 100644[m
[1m--- a/requirements.txt[m
[1m+++ b/requirements.txt[m
[36m@@ -4,3 +4,5 @@[m [mscipy>=1.6.0[m
 matplotlib>=3.3.4[m
 torch>=1.8.0[m
 torchvision>=0.9.0[m
[32m+[m[32mpillow>=8.1.0[m
[32m+[m[32mscikit-image>=0.18.1[m
